security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_partner_provider:
            entity:
                class: App\Entity\Partner
                property: mail

        app_structure_provider:
            entity:
                class: App\Entity\Structure
                property: mail

        app_admin_provider:
            entity:
                class: App\Entity\Admin
                property: mail

        all_users:
                chain:
                    providers: [
                        'app_partner_provider', 
                        'app_structure_provider', 
                        'app_admin_provider'
                        ]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: all_users
            custom_authenticator: App\Security\LogInFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
    role_hierarchy:
        ROLE_ADMIN: [ROLE_ADMIN, ROLE_PARTNER, ROLE_STRUCTURE]
        ROLE_PARTNER: [ROLE_PARTNER, ROLE_STRUCTURE]
        ROLE_STRUCTURE: ROLE_STRUCTURE

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon